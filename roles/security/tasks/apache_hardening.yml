---
- name: Configure Apache to listen on localhost:{{ apache_service.port }}
  ansible.builtin.lineinfile:
    path: /etc/apache2/ports.conf
    regexp: "^Listen 80$"
    line: "Listen 127.0.0.1:{{ apache_service.port }}"
  notify:
    - restart_apache_vm
    - restart_apache_codespace
  tags:
    - config_port

- name: Enable mod_headers
  ansible.builtin.apache2_module:
    name: headers
    state: present
  tags:
    - mod_headers
    - htaccess
    - apache_virtualhost

- name: Enable mod_rewrite for .htaccess
  ansible.builtin.apache2_module:
    name: rewrite
    state: present
  tags:
    - mod_rewrite
    - htaccess

- name: Add secure HTTP headers
  ansible.builtin.copy:
    dest: /etc/apache2/conf-available/security-headers.conf
    content: |
      Header always set X-Content-Type-Options "nosniff"
      Header always set X-Frame-Options "SAMEORIGIN"
      Header always set X-XSS-Protection "1; mode=block"
      Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
      Header always set Referrer-Policy "no-referrer-when-downgrade"
      Header always set Permissions-Policy "geolocation=(), microphone=()"
    owner: root
    group: root
    mode: '0644'
  notify:
    - reload_apache_vm
    - reload_apache_codespace
  tags:
    - config

- name: Enable secure headers configuration
  ansible.builtin.command: a2enconf security-headers.conf
  args:
    creates: /etc/apache2/conf-enabled/security-headers.conf
  notify:
    - reload_apache_vm
    - reload_apache_codespace
  tags:
    - config

- name: Disable unnecessary Apache modules
  ansible.builtin.apache2_module:
    name: "{{ item }}"
    state: absent
  loop:
    - status
    - cgi
  notify:
    - restart_apache_vm
    - restart_apache_codespace
  tags:
    - config

- name: Configure global Apache security settings
  ansible.builtin.copy:
    dest: /etc/apache2/conf-available/hardening.conf
    content: |
      <Files ".htaccess">
        Require all granted
      </Files>

      # Block hidden and sensitive files
      <FilesMatch "^\.">
        Require all denied
      </FilesMatch>

      <FilesMatch "\.(log|sql|bak|conf|ini|env|dist|yml|yaml|json|xml|lock)$">
        Require all denied
      </FilesMatch>

      # Block common documentation files
      <FilesMatch "^(README|LICENSE|CHANGELOG)(\..*)?$">
        Require all denied
      </FilesMatch>

      # Disable directory listing
      Options -Indexes

      # Hide server information
      ServerTokens Prod
      ServerSignature Off
  notify:
    - reload_apache_vm
    - reload_apache_codespace
  tags:
    - config

- name: Enable hardening configuration
  ansible.builtin.command: a2enconf hardening.conf
  args:
    creates: /etc/apache2/conf-enabled/hardening.conf
  notify:
    - reload_apache_vm
    - reload_apache_codespace
  tags:
    - config

# --- Reverse Proxy IP Setup ---

# Note: These tasks configure Apache to correctly handle real client IPs and HTTPS when behind 
# Caddy + Cloudflare Tunnel. Without them, Apache sees only Caddy's local IP and treats requests as HTTP. 
# Not needed for direct Apache access; if the proxy runs on another internal host, 
# adjust RemoteIPInternalProxy accordingly.

- name: Enable Apache mod_remoteip
  ansible.builtin.apache2_module:
    name: remoteip
    state: present
  tags:
    - mod_remoteip
    - apache_virtualhost

- name: Configure Apache RemoteIP globally
  ansible.builtin.copy:
    dest: /etc/apache2/conf-available/remoteip.conf
    content: |
      # Trust Caddy on 127.0.0.1 and replace it with the real client IP from X-Forwarded-For.
      RemoteIPHeader X-Forwarded-For
      RemoteIPInternalProxy 127.0.0.1

      # Ensure Apache trusts the Caddy reverse proxy and correctly interprets forwarded requests as HTTPS.
      SetEnvIfExpr "%{REMOTE_ADDR} == '127.0.0.1' && req('X-Forwarded-Proto') == 'https'" HTTPS=on
  notify:
    - reload_apache_vm
    - reload_apache_codespace
  tags:
    - mod_remoteip
    - config
    - apache_virtualhost

- name: Enable remoteip.conf
  ansible.builtin.command: a2enconf remoteip.conf
  args:
    creates: /etc/apache2/conf-enabled/remoteip.conf
  notify:
    - reload_apache_vm
    - reload_apache_codespace
  tags:
    - mod_remoteip
    - config
    - apache_virtualhost